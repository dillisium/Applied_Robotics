// Generated by gencpp from file a2_msgs/JoystickA2.msg
// DO NOT EDIT!


#ifndef A2_MSGS_MESSAGE_JOYSTICKA2_H
#define A2_MSGS_MESSAGE_JOYSTICKA2_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace a2_msgs
{
template <class ContainerAllocator>
struct JoystickA2_
{
  typedef JoystickA2_<ContainerAllocator> Type;

  JoystickA2_()
    : header()
    , lx(0.0)
    , ly(0.0)
    , rx(0.0)
    , ry(0.0)
    , up(0)
    , right(0)
    , down(0)
    , left(0)
    , A(0)
    , B(0)
    , X(0)
    , Y(0)
    , L1(0)
    , L2(0)
    , R1(0)
    , R2(0)
    , F1(0)
    , select(0)
    , F2(0)
    , start(0)  {
    }
  JoystickA2_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , lx(0.0)
    , ly(0.0)
    , rx(0.0)
    , ry(0.0)
    , up(0)
    , right(0)
    , down(0)
    , left(0)
    , A(0)
    , B(0)
    , X(0)
    , Y(0)
    , L1(0)
    , L2(0)
    , R1(0)
    , R2(0)
    , F1(0)
    , select(0)
    , F2(0)
    , start(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _lx_type;
  _lx_type lx;

   typedef float _ly_type;
  _ly_type ly;

   typedef float _rx_type;
  _rx_type rx;

   typedef float _ry_type;
  _ry_type ry;

   typedef uint8_t _up_type;
  _up_type up;

   typedef uint8_t _right_type;
  _right_type right;

   typedef uint8_t _down_type;
  _down_type down;

   typedef uint8_t _left_type;
  _left_type left;

   typedef uint8_t _A_type;
  _A_type A;

   typedef uint8_t _B_type;
  _B_type B;

   typedef uint8_t _X_type;
  _X_type X;

   typedef uint8_t _Y_type;
  _Y_type Y;

   typedef uint8_t _L1_type;
  _L1_type L1;

   typedef uint8_t _L2_type;
  _L2_type L2;

   typedef uint8_t _R1_type;
  _R1_type R1;

   typedef uint8_t _R2_type;
  _R2_type R2;

   typedef uint8_t _F1_type;
  _F1_type F1;

   typedef uint8_t _select_type;
  _select_type select;

   typedef uint8_t _F2_type;
  _F2_type F2;

   typedef uint8_t _start_type;
  _start_type start;





  typedef boost::shared_ptr< ::a2_msgs::JoystickA2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::a2_msgs::JoystickA2_<ContainerAllocator> const> ConstPtr;

}; // struct JoystickA2_

typedef ::a2_msgs::JoystickA2_<std::allocator<void> > JoystickA2;

typedef boost::shared_ptr< ::a2_msgs::JoystickA2 > JoystickA2Ptr;
typedef boost::shared_ptr< ::a2_msgs::JoystickA2 const> JoystickA2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::a2_msgs::JoystickA2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::a2_msgs::JoystickA2_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::a2_msgs::JoystickA2_<ContainerAllocator1> & lhs, const ::a2_msgs::JoystickA2_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.lx == rhs.lx &&
    lhs.ly == rhs.ly &&
    lhs.rx == rhs.rx &&
    lhs.ry == rhs.ry &&
    lhs.up == rhs.up &&
    lhs.right == rhs.right &&
    lhs.down == rhs.down &&
    lhs.left == rhs.left &&
    lhs.A == rhs.A &&
    lhs.B == rhs.B &&
    lhs.X == rhs.X &&
    lhs.Y == rhs.Y &&
    lhs.L1 == rhs.L1 &&
    lhs.L2 == rhs.L2 &&
    lhs.R1 == rhs.R1 &&
    lhs.R2 == rhs.R2 &&
    lhs.F1 == rhs.F1 &&
    lhs.select == rhs.select &&
    lhs.F2 == rhs.F2 &&
    lhs.start == rhs.start;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::a2_msgs::JoystickA2_<ContainerAllocator1> & lhs, const ::a2_msgs::JoystickA2_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace a2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::a2_msgs::JoystickA2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::a2_msgs::JoystickA2_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::a2_msgs::JoystickA2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::a2_msgs::JoystickA2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::a2_msgs::JoystickA2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::a2_msgs::JoystickA2_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::a2_msgs::JoystickA2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2156b3fa7a9d5da9f9422f404a192b9b";
  }

  static const char* value(const ::a2_msgs::JoystickA2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2156b3fa7a9d5da9ULL;
  static const uint64_t static_value2 = 0xf9422f404a192b9bULL;
};

template<class ContainerAllocator>
struct DataType< ::a2_msgs::JoystickA2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a2_msgs/JoystickA2";
  }

  static const char* value(const ::a2_msgs::JoystickA2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::a2_msgs::JoystickA2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# 左侧摇杆和右侧摇杆\n"
"float32 lx    # 左侧摇杆从左到右, 对应值域[-1.0, 1.0]\n"
"float32 ly    # 左侧摇杆从下到上, 对应值域[-1.0, 1.0]\n"
"float32 rx    # 右侧摇杆从左到右, 对应值域[-1.0, 1.0]\n"
"float32 ry    # 右侧摇杆从下到上, 对应值域[-1.0, 1.0]\n"
"\n"
"# 左侧摇杆下方四个方向键，取值为bool值0或1\n"
"uint8 up   \n"
"uint8 right\n"
"uint8 down\n"
"uint8 left\n"
"\n"
"# 右侧摇杆下方四个方向键，取值为bool值0或1\n"
"uint8 A\n"
"uint8 B\n"
"uint8 X\n"
"uint8 Y\n"
"\n"
"# 功能键，取值为bool值0或1\n"
"uint8 L1\n"
"uint8 L2\n"
"\n"
"uint8 R1\n"
"uint8 R2\n"
"\n"
"uint8 F1\n"
"uint8 select\n"
"\n"
"uint8 F2\n"
"uint8 start\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::a2_msgs::JoystickA2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::a2_msgs::JoystickA2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.lx);
      stream.next(m.ly);
      stream.next(m.rx);
      stream.next(m.ry);
      stream.next(m.up);
      stream.next(m.right);
      stream.next(m.down);
      stream.next(m.left);
      stream.next(m.A);
      stream.next(m.B);
      stream.next(m.X);
      stream.next(m.Y);
      stream.next(m.L1);
      stream.next(m.L2);
      stream.next(m.R1);
      stream.next(m.R2);
      stream.next(m.F1);
      stream.next(m.select);
      stream.next(m.F2);
      stream.next(m.start);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JoystickA2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::a2_msgs::JoystickA2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::a2_msgs::JoystickA2_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "lx: ";
    Printer<float>::stream(s, indent + "  ", v.lx);
    s << indent << "ly: ";
    Printer<float>::stream(s, indent + "  ", v.ly);
    s << indent << "rx: ";
    Printer<float>::stream(s, indent + "  ", v.rx);
    s << indent << "ry: ";
    Printer<float>::stream(s, indent + "  ", v.ry);
    s << indent << "up: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.up);
    s << indent << "right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right);
    s << indent << "down: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.down);
    s << indent << "left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left);
    s << indent << "A: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.A);
    s << indent << "B: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.B);
    s << indent << "X: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.X);
    s << indent << "Y: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Y);
    s << indent << "L1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.L1);
    s << indent << "L2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.L2);
    s << indent << "R1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.R1);
    s << indent << "R2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.R2);
    s << indent << "F1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.F1);
    s << indent << "select: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.select);
    s << indent << "F2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.F2);
    s << indent << "start: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.start);
  }
};

} // namespace message_operations
} // namespace ros

#endif // A2_MSGS_MESSAGE_JOYSTICKA2_H
