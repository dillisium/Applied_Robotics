// Generated by gencpp from file a2_msgs/JoystickUKD.msg
// DO NOT EDIT!


#ifndef A2_MSGS_MESSAGE_JOYSTICKUKD_H
#define A2_MSGS_MESSAGE_JOYSTICKUKD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace a2_msgs
{
template <class ContainerAllocator>
struct JoystickUKD_
{
  typedef JoystickUKD_<ContainerAllocator> Type;

  JoystickUKD_()
    : header()
    , rocker0_x(0.0)
    , rocker0_y(0.0)
    , button0(0)
    , button1(0)
    , button2(0)  {
    }
  JoystickUKD_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , rocker0_x(0.0)
    , rocker0_y(0.0)
    , button0(0)
    , button1(0)
    , button2(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _rocker0_x_type;
  _rocker0_x_type rocker0_x;

   typedef float _rocker0_y_type;
  _rocker0_y_type rocker0_y;

   typedef uint8_t _button0_type;
  _button0_type button0;

   typedef uint8_t _button1_type;
  _button1_type button1;

   typedef uint8_t _button2_type;
  _button2_type button2;





  typedef boost::shared_ptr< ::a2_msgs::JoystickUKD_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::a2_msgs::JoystickUKD_<ContainerAllocator> const> ConstPtr;

}; // struct JoystickUKD_

typedef ::a2_msgs::JoystickUKD_<std::allocator<void> > JoystickUKD;

typedef boost::shared_ptr< ::a2_msgs::JoystickUKD > JoystickUKDPtr;
typedef boost::shared_ptr< ::a2_msgs::JoystickUKD const> JoystickUKDConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::a2_msgs::JoystickUKD_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::a2_msgs::JoystickUKD_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::a2_msgs::JoystickUKD_<ContainerAllocator1> & lhs, const ::a2_msgs::JoystickUKD_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.rocker0_x == rhs.rocker0_x &&
    lhs.rocker0_y == rhs.rocker0_y &&
    lhs.button0 == rhs.button0 &&
    lhs.button1 == rhs.button1 &&
    lhs.button2 == rhs.button2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::a2_msgs::JoystickUKD_<ContainerAllocator1> & lhs, const ::a2_msgs::JoystickUKD_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace a2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::a2_msgs::JoystickUKD_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::a2_msgs::JoystickUKD_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::a2_msgs::JoystickUKD_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::a2_msgs::JoystickUKD_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::a2_msgs::JoystickUKD_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::a2_msgs::JoystickUKD_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::a2_msgs::JoystickUKD_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ceb8376dc5ce1da01f011cf6cab58635";
  }

  static const char* value(const ::a2_msgs::JoystickUKD_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xceb8376dc5ce1da0ULL;
  static const uint64_t static_value2 = 0x1f011cf6cab58635ULL;
};

template<class ContainerAllocator>
struct DataType< ::a2_msgs::JoystickUKD_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a2_msgs/JoystickUKD";
  }

  static const char* value(const ::a2_msgs::JoystickUKD_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::a2_msgs::JoystickUKD_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# 摇杆\n"
"float32 rocker0_x   # 摇杆从下到上，对应值域[-1.0, 1.0]\n"
"float32 rocker0_y   # 摇杆从左到右，对应值域[-1.0, 1.0]\n"
"\n"
"# 按键\n"
"uint8 button0\n"
"uint8 button1\n"
"uint8 button2\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::a2_msgs::JoystickUKD_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::a2_msgs::JoystickUKD_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.rocker0_x);
      stream.next(m.rocker0_y);
      stream.next(m.button0);
      stream.next(m.button1);
      stream.next(m.button2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JoystickUKD_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::a2_msgs::JoystickUKD_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::a2_msgs::JoystickUKD_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "rocker0_x: ";
    Printer<float>::stream(s, indent + "  ", v.rocker0_x);
    s << indent << "rocker0_y: ";
    Printer<float>::stream(s, indent + "  ", v.rocker0_y);
    s << indent << "button0: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button0);
    s << indent << "button1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button1);
    s << indent << "button2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // A2_MSGS_MESSAGE_JOYSTICKUKD_H
