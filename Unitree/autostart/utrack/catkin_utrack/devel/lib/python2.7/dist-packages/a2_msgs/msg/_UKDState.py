# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from a2_msgs/UKDState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class UKDState(genpy.Message):
  _md5sum = "f226fa6e72173f2731bf809458ac94af"
  _type = "a2_msgs/UKDState"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

# UWB标签在基站坐标系下的位姿（欧几里得坐标系）
float32 tx
float32 ty
float32 tz
float32 ta

# UWB标签在基站坐标系下的位姿（圆柱坐标系）方位角, 俯仰角, 距离
float32 to 
float32 tp
float32 td

# 标签IMU的原始roll、pitch和yaw值
float32 t_roll
float32 t_pitch
float32 t_yaw

# 当前次位姿估计的有效性标志: 0-无效; 1-有效
uint8 t_valid

# 位姿估计连续成功的次数
uint16 est_suc_count

# 标签摇杆的值
float32 rocker0_x
float32 rocker0_y

# 标签按键的原始值
int8 button0
int8 button1
int8 button2
int8 button3

# 标签按键的联合解析值
int8 buttons_mode

# joy mode
int8 joy_mode
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','tx','ty','tz','ta','to','tp','td','t_roll','t_pitch','t_yaw','t_valid','est_suc_count','rocker0_x','rocker0_y','button0','button1','button2','button3','buttons_mode','joy_mode']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','uint8','uint16','float32','float32','int8','int8','int8','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,tx,ty,tz,ta,to,tp,td,t_roll,t_pitch,t_yaw,t_valid,est_suc_count,rocker0_x,rocker0_y,button0,button1,button2,button3,buttons_mode,joy_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UKDState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tx is None:
        self.tx = 0.
      if self.ty is None:
        self.ty = 0.
      if self.tz is None:
        self.tz = 0.
      if self.ta is None:
        self.ta = 0.
      if self.to is None:
        self.to = 0.
      if self.tp is None:
        self.tp = 0.
      if self.td is None:
        self.td = 0.
      if self.t_roll is None:
        self.t_roll = 0.
      if self.t_pitch is None:
        self.t_pitch = 0.
      if self.t_yaw is None:
        self.t_yaw = 0.
      if self.t_valid is None:
        self.t_valid = 0
      if self.est_suc_count is None:
        self.est_suc_count = 0
      if self.rocker0_x is None:
        self.rocker0_x = 0.
      if self.rocker0_y is None:
        self.rocker0_y = 0.
      if self.button0 is None:
        self.button0 = 0
      if self.button1 is None:
        self.button1 = 0
      if self.button2 is None:
        self.button2 = 0
      if self.button3 is None:
        self.button3 = 0
      if self.buttons_mode is None:
        self.buttons_mode = 0
      if self.joy_mode is None:
        self.joy_mode = 0
    else:
      self.header = std_msgs.msg.Header()
      self.tx = 0.
      self.ty = 0.
      self.tz = 0.
      self.ta = 0.
      self.to = 0.
      self.tp = 0.
      self.td = 0.
      self.t_roll = 0.
      self.t_pitch = 0.
      self.t_yaw = 0.
      self.t_valid = 0
      self.est_suc_count = 0
      self.rocker0_x = 0.
      self.rocker0_y = 0.
      self.button0 = 0
      self.button1 = 0
      self.button2 = 0
      self.button3 = 0
      self.buttons_mode = 0
      self.joy_mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_10fBH2f6b().pack(_x.tx, _x.ty, _x.tz, _x.ta, _x.to, _x.tp, _x.td, _x.t_roll, _x.t_pitch, _x.t_yaw, _x.t_valid, _x.est_suc_count, _x.rocker0_x, _x.rocker0_y, _x.button0, _x.button1, _x.button2, _x.button3, _x.buttons_mode, _x.joy_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 57
      (_x.tx, _x.ty, _x.tz, _x.ta, _x.to, _x.tp, _x.td, _x.t_roll, _x.t_pitch, _x.t_yaw, _x.t_valid, _x.est_suc_count, _x.rocker0_x, _x.rocker0_y, _x.button0, _x.button1, _x.button2, _x.button3, _x.buttons_mode, _x.joy_mode,) = _get_struct_10fBH2f6b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_10fBH2f6b().pack(_x.tx, _x.ty, _x.tz, _x.ta, _x.to, _x.tp, _x.td, _x.t_roll, _x.t_pitch, _x.t_yaw, _x.t_valid, _x.est_suc_count, _x.rocker0_x, _x.rocker0_y, _x.button0, _x.button1, _x.button2, _x.button3, _x.buttons_mode, _x.joy_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 57
      (_x.tx, _x.ty, _x.tz, _x.ta, _x.to, _x.tp, _x.td, _x.t_roll, _x.t_pitch, _x.t_yaw, _x.t_valid, _x.est_suc_count, _x.rocker0_x, _x.rocker0_y, _x.button0, _x.button1, _x.button2, _x.button3, _x.buttons_mode, _x.joy_mode,) = _get_struct_10fBH2f6b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_10fBH2f6b = None
def _get_struct_10fBH2f6b():
    global _struct_10fBH2f6b
    if _struct_10fBH2f6b is None:
        _struct_10fBH2f6b = struct.Struct("<10fBH2f6b")
    return _struct_10fBH2f6b
